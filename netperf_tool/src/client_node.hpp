// Copyright 2022 Open Source Robotics Foundation, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef CLIENT_NODE_HPP_
#define CLIENT_NODE_HPP_

#include <chrono>
#include <memory>
#include <mutex>
#include <string>
#include <unordered_map>
#include <vector>

#include "netperf_tool_interfaces/msg/bytes.hpp"
#include "netperf_tool_interfaces/srv/get_results.hpp"

#include "rclcpp/executors.hpp"
#include "rclcpp/node.hpp"
#include "rclcpp/serialization.hpp"
#include "rclcpp/serialized_message.hpp"

namespace netperf_tool
{
/// Raw data with info about sent messages.
struct ClientCollectedInfo
{
  /// The total number of messages published.
  size_t number_of_messages_published;
  /// The serialized message size.
  size_t serialized_message_size;
  /// Times when the messages were published.
  std::vector<rclcpp::Time> message_published_times;
};

/// The results of an experiment.
struct ClientResults
{
  /// Statistics, obtained from service call to the netperf server.
  netperf_tool_interfaces::srv::GetResults::Response statistics;
  /// Raw message data, generated by the client.
  ClientCollectedInfo collected_info;
};

/// Node used as client side of a ros2 netperf experiment.
class ClientNode : public rclcpp::Node
{
public:
  /// Construct.
  /**
   * \param[in] options Node options used to construct the node.
   * \param[in] pub_qos Qos profile to create the publisher used in the experiment.
   * \param[in] array_size Size of the data to send in bytes.
   *  This is approximately the serialized message size.
   * \param[in] target_pub_period Period at which messages will be published.
   * \param[in] server_timeout Timeout used to wait for a ros2 netperf server.
   */
  explicit ClientNode(
    const rclcpp::NodeOptions & options,
    const rclcpp::QoS & pub_qos,
    size_t array_size,
    std::chrono::nanoseconds target_pub_period,
    std::chrono::nanoseconds server_timeout);

  /// Wait until a ros2 netperf server is available.
  /**
   * The `server_timeout` specified in the constructor is used.
   */
  bool
  wait_for_server();

  /// Wait until a ros2 netperf server is available.
  /**
   * \param[in] timeout Time to wait for server.
   */
  bool
  wait_for_server(std::chrono::nanoseconds timeout);

  /// Start publishing messages.
  /**
   * This should be done after waiting for a ros2 netperf server,
   * though that's not required.
   */
  void
  start_publishing();

  /// Stop publishing messages.
  /**
   * This should be done after waiting for a ros2 netperf server,
   * though that's not required.
   */
  void
  stop_publishing();

  /// Wait until publishing remaining messages and get statistics from server.
  /**
   * This should be called after stopping to publish.
   * \param[in] executor Executor used to wait for a server response.
   *  The executor should not be already spinning.
   */
  void
  sync_with_server(rclcpp::Executor & exec);

  /// Get the experiment results.
  /**
   * This should be done after stopped publishing and having sync with the server.
   * If not, the results will be incorrect.
   * This method will clear the currently stored results, so calling it twice in a row
   * will result in empty results the second time.
   */
  ClientResults
  extract_results();

  /// Get topic name used to publish messages in the experiment.
  std::string
  get_topic_name();

  /// Get publisher gid, converted to an string.
  std::string
  get_stringified_pub_gid();

  /// Publish the next message.
  /**
   * This is used in a timer callback.
   */
  void
  pub_next_msg();

private:
  /// Cached message, which is published each time.
  netperf_tool_interfaces::msg::Bytes msg_to_publish_;
  /// Timer, used to publish messages periodically.
  std::shared_ptr<rclcpp::TimerBase> timer_;
  /// Publisher, used to send messages to the netperf server to complete the experiment.
  rclcpp::Publisher<netperf_tool_interfaces::msg::Bytes>::SharedPtr pub_;
  /// Client, used to get the statistics from the netperf server when finishing the experiment.
  rclcpp::Client<netperf_tool_interfaces::srv::GetResults>::SharedPtr client_;
  /// Raw info of the published messages.
  ClientCollectedInfo collected_info_;
  /// Mutex to protext collected_info_.
  mutable std::mutex collected_info_mutex_;
  /// Statistics of the experiment, got from the server.
  netperf_tool_interfaces::srv::GetResults::Response::SharedPtr statistics_;
  /// Pub period used by the timer.
  std::chrono::nanoseconds target_pub_period_;
  /// Timeout used when waiting for a netperf server to be available.
  std::chrono::nanoseconds server_timeout_;
  /// Clock used to get timestamps.
  rclcpp::Clock system_time_clock_{RCL_SYSTEM_TIME};
};
}  // namespace netperf_tool
#endif  // CLIENT_NODE_HPP_
